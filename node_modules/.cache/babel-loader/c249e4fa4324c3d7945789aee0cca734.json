{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp() {}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n;\nexport function* onEmailSignInStart() {\n  console.log('start');\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart)]);\n}","map":{"version":3,"sources":["/Users/daichi/Desktop/crwn-clothing01/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","displayName","createUserWithEmailAndPassword","additionalData","signInAfterSignUp","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","console","log","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects'; \n\nimport UserActionTypes from './user.types'; \n\nimport { \n    signInSuccess, \n    signInFailure, \n    signOutSuccess, \n    signOutFailure, \n    signUpSuccess, \n    signUpFailure\n } from './user.actions'; \n\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils'; \n\nexport function* getSnapshotFromUserAuth(userAuth){\n    try{\n        const userRef = yield call(createUserProfileDocument, userAuth); \n        const userSnapshot = yield userRef.get(); \n        yield put(\n            signInSuccess({id: userSnapshot.id, ...userSnapshot.data()})\n        )\n    } catch(error){\n        yield put(signInFailure(error)); \n    }\n}\n\nexport function* signInWithGoogle(){\n    try{\n        const {user} = yield auth.signInWithPopup(googleProvider); \n        yield getSnapshotFromUserAuth(user); \n    } catch(error){\n        yield put(signInFailure(error)); \n    }\n}; \n\nexport function* signInWithEmail({payload: { email, password }}){\n    try{\n        const { user } = yield auth.signInWithEmailAndPassword(email, password); \n        yield getSnapshotFromUserAuth(user); \n    } catch(error){\n        yield put(signInFailure(error)); \n    }\n}\n\nexport function* isUserAuthenticated(){\n    try{\n        const userAuth = yield getCurrentUser(); \n        if(!userAuth) return; \n        yield getSnapshotFromUserAuth(userAuth); \n    } catch(error){\n        yield put(signInFailure(error)); \n    }\n}\n\nexport function* signOut(){\n    try{\n        yield auth.signOut(); \n        yield put(signOutSuccess()); \n    } catch(error){\n        yield put(signOutFailure(error)); \n    }\n}\n\nexport function* signUp({payload: {email, password, displayName}}){\n    try{\n        const { user } = yield auth.createUserWithEmailAndPassword(\n            email, \n            password\n        ); \n        yield put(signUpSuccess({user, additionalData: {displayName}}))\n    } catch(error){\n        yield put(signUpFailure(error)); \n    }\n}\n\nexport function* signInAfterSignUp(){\n    \n}\n\nexport function* onGoogleSignInStart(){\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle); \n}; \n\nexport function* onEmailSignInStart(){\n    console.log('start'); \n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail); \n}\n\nexport function* onCheckUserSession(){\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated); \n}\n\nexport function* onSignOutStart(){\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut)\n}\n\nexport function* onSignUpStart(){\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp); \n}\n\nexport function* onSignUpSuccess(){\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp); \n}\n\nexport function* userSagas(){\n    yield all([\n        call(onGoogleSignInStart), \n        call(onEmailSignInStart), \n        call(onCheckUserSession), \n        call(onSignOutStart), \n        call(onSignUpStart)\n    ]); \n}"]},"metadata":{},"sourceType":"module"}