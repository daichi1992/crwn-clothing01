{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyA8vZhxE2cvqTGTwt5EWgekvSiQGaEW86g\",\n  authDomain: \"crwn-db-55455.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-55455.firebaseio.com\",\n  projectId: \"crwn-db-55455\",\n  storageBucket: \"crwn-db-55455.appspot.com\",\n  messagingSenderId: \"957662573273\",\n  appId: \"1:957662573273:web:99bcda44313474a08144c8\",\n  measurementId: \"G-RLJD1HX53Z\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // console.log(userAuth); \n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const collectionRef = firestore.collection('users');\n  console.log(collectionRef); // console.log(userRef); \n\n  const snapShot = await userRef.get();\n  const collectionSnapshot = await collectionRef.get();\n  console.log(collectionSnapshot.docs.map(doc => doc.data())); // console.log(snapShot); \n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n\n    console.log('called');\n  }\n\n  return userRef;\n};\nconst addCollectionAndDocuments = firebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  propmt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/daichi/Desktop/crwn-clothing01/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collection","console","log","snapShot","get","collectionSnapshot","docs","map","data","exists","displayName","email","createdAt","Date","set","error","message","addCollectionAndDocuments","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","propmt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,+BAFD;AAGXC,EAAAA,WAAW,EAAE,sCAHF;AAIXC,EAAAA,SAAS,EAAE,eAJA;AAKXC,EAAAA,aAAa,EAAE,2BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AACzE,MAAG,CAACD,QAAJ,EAAc,OAD2D,CAEzE;;AAEA,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqB,OAArB,CAAtB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ,EANyE,CAOzE;;AAEA,QAAMI,QAAQ,GAAG,MAAMR,OAAO,CAACS,GAAR,EAAvB;AACA,QAAMC,kBAAkB,GAAG,MAAMN,aAAa,CAACK,GAAd,EAAjC;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAYG,kBAAkB,CAACC,IAAnB,CAAwBC,GAAxB,CAA4BV,GAAG,IAAIA,GAAG,CAACW,IAAJ,EAAnC,CAAZ,EAXyE,CAYzE;;AAEA,MAAG,CAACL,QAAQ,CAACM,MAAb,EAAoB;AAChB,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBlB,QAA7B;AACA,UAAMmB,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAG;AACC,YAAMlB,OAAO,CAACmB,GAAR,CAAY;AACdJ,QAAAA,WADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA,SAHc;AAId,WAAGlB;AAJW,OAAZ,CAAN;AAMH,KAPD,CAOE,OAAMqB,KAAN,EAAY;AACVd,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCa,KAAK,CAACC,OAAzC;AACH;;AAEDf,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH;;AAED,SAAOP,OAAP;AACH,CAjCM;AAmCP,MAAMsB,yBAAyB,GAG/BnC,QAAQ,CAACoC,aAAT,CAAuBnC,MAAvB,CAHA;AAKA,OAAO,MAAMoC,IAAI,GAAGrC,QAAQ,CAACqC,IAAT,EAAb;AACP,OAAO,MAAMvB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAMwB,QAAQ,GAAG,IAAItC,QAAQ,CAACqC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAE;AAAT,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAetC,QAAf","sourcesContent":["import firebase from 'firebase/app'; \nimport 'firebase/firestore'; \nimport 'firebase/auth'; \n\nconst config = {\n    apiKey: \"AIzaSyA8vZhxE2cvqTGTwt5EWgekvSiQGaEW86g\",\n    authDomain: \"crwn-db-55455.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-55455.firebaseio.com\",\n    projectId: \"crwn-db-55455\",\n    storageBucket: \"crwn-db-55455.appspot.com\",\n    messagingSenderId: \"957662573273\",\n    appId: \"1:957662573273:web:99bcda44313474a08144c8\",\n    measurementId: \"G-RLJD1HX53Z\"\n}; \n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n    if(!userAuth) return; \n    // console.log(userAuth); \n\n    const userRef = firestore.doc(`users/${userAuth.uid}`); \n    const collectionRef = firestore.collection('users'); \n    console.log(collectionRef); \n    // console.log(userRef); \n    \n    const snapShot = await userRef.get(); \n    const collectionSnapshot = await collectionRef.get(); \n    console.log(collectionSnapshot.docs.map(doc => doc.data())); \n    // console.log(snapShot); \n\n    if(!snapShot.exists){\n        const {displayName, email} = userAuth; \n        const createdAt = new Date(); \n\n        try{\n            await userRef.set({\n                displayName, \n                email, \n                createdAt, \n                ...additionalData\n            }); \n        } catch(error){\n            console.log('error creating user', error.message); \n        } \n\n        console.log('called'); \n    }\n\n    return userRef; \n}\n\nconst addCollectionAndDocuments = \n\n\nfirebase.initializeApp(config); \n\nexport const auth = firebase.auth(); \nexport const firestore = firebase.firestore(); \n\nconst provider = new firebase.auth.GoogleAuthProvider(); \nprovider.setCustomParameters({propmt: 'select_account'}); \nexport const signInWithGoogle = () => auth.signInWithPopup(provider); \n\nexport default firebase; \n"]},"metadata":{},"sourceType":"module"}