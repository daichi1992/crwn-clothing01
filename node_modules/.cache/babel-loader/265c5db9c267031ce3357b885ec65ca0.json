{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  } // collectionRef.get().then(snapshot => {\n  //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot); \n  //     dispatch(fetchCollectionsSuccess(collectionsMap)); \n  //     // this.setState({loading: false}); \n  // }).catch(error => dispatch(fetchCollectionsFailure(error.message))); \n\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["/Users/daichi/Desktop/crwn-clothing01/src/redux/shop/shop.sagas.jsx"],"names":["takeEvery","call","put","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,gBAAjE;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,oBAAV,GAAgC;AAEnC,MAAG;AACC,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAACG,+BAAD,EAAkCO,QAAlC,CAAjC;AACA,UAAMT,GAAG,CAACG,uBAAuB,CAACQ,cAAD,CAAxB,CAAT;AACH,GALD,CAKE,OAAMC,KAAN,EAAY;AACV,UAAMZ,GAAG,CAACI,uBAAuB,CAACQ,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH,GATkC,CAYnC;AACA;AACA;AACA;AACA;;AACH;AAED,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMhB,SAAS,CACXO,eAAe,CAACU,uBADL,EAEXT,oBAFW,CAAf;AAIH","sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects'; \n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils'; \n\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions'; \n\nimport ShopActionTypes from './shop.types'; \n\nexport function* fetchCollectionAsync(){\n\n    try{\n        const collectionRef = firestore.collection('collections'); \n        const snapshot = yield collectionRef.get(); \n        const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot); \n        yield put(fetchCollectionsSuccess(collectionsMap)); \n    } catch(error){\n        yield put(fetchCollectionsFailure(error.message)); \n    }\n    \n\n    // collectionRef.get().then(snapshot => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot); \n    //     dispatch(fetchCollectionsSuccess(collectionsMap)); \n    //     // this.setState({loading: false}); \n    // }).catch(error => dispatch(fetchCollectionsFailure(error.message))); \n}\n\nexport function* fetchCollectionsStart(){\n    yield takeEvery(\n        ShopActionTypes.FETCH_COLLECTIONS_START, \n        fetchCollectionAsync\n    ); \n}"]},"metadata":{},"sourceType":"module"}