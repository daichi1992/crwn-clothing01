{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport '../../firebase/firebase.utils';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionAsync() {\n  yield console.log('I am fired');\n  const collectionRef = firestore.collection('collections');\n  collectionRef.get().then(snapshot => {\n    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionsMap)); // this.setState({loading: false}); \n  }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["/Users/daichi/Desktop/crwn-clothing01/src/redux/shop/shop.sagas.jsx"],"names":["takeEvery","ShopActionTypes","fetchCollectionAsync","console","log","collectionRef","firestore","collection","get","then","snapshot","collectionsMap","convertCollectionsSnapshotToMap","dispatch","fetchCollectionsSuccess","catch","error","fetchCollectionsFailure","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AAEA,OAAgB,+BAAhB;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,oBAAV,GAAgC;AACnC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AAEA,QAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAAtB;AAEAF,EAAAA,aAAa,CAACG,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACjC,UAAMC,cAAc,GAAGC,+BAA+B,CAACF,QAAD,CAAtD;AACAG,IAAAA,QAAQ,CAACC,uBAAuB,CAACH,cAAD,CAAxB,CAAR,CAFiC,CAGjC;AACH,GAJD,EAIGI,KAJH,CAISC,KAAK,IAAIH,QAAQ,CAACI,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAJ1B;AAKH;AAED,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMnB,SAAS,CACXC,eAAe,CAACmB,uBADL,EAEXlB,oBAFW,CAAf;AAIH","sourcesContent":["import { takeEvery } from 'redux-saga/effects'; \n\nimport { } from '../../firebase/firebase.utils'; \n\nimport ShopActionTypes from './shop.types'; \n\nexport function* fetchCollectionAsync(){\n    yield console.log('I am fired'); \n\n    const collectionRef = firestore.collection('collections'); \n\n    collectionRef.get().then(snapshot => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot); \n        dispatch(fetchCollectionsSuccess(collectionsMap)); \n        // this.setState({loading: false}); \n    }).catch(error => dispatch(fetchCollectionsFailure(error.message))); \n}\n\nexport function* fetchCollectionsStart(){\n    yield takeEvery(\n        ShopActionTypes.FETCH_COLLECTIONS_START, \n        fetchCollectionAsync\n    ); \n}"]},"metadata":{},"sourceType":"module"}